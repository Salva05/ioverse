# Generated by Django 5.1.2 on 2024-11-06 16:13

import apps.assistant.models.assistant
import apps.assistant.models.message
import apps.assistant.models.thread
import apps.assistant.models.vectorstore
import apps.assistant.models.vectorstorefile
import apps.assistant.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('id', models.CharField(help_text='The unique identifier of the OpenAI API object.', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(help_text='The object type.', max_length=50)),
                ('created_at', models.IntegerField(help_text='Unix timestamp (in seconds) for when the object was created.')),
                ('name', models.CharField(blank=True, help_text='The name of the assistant (max 256 characters).', max_length=256, null=True)),
                ('description', models.CharField(blank=True, help_text='The description of the assistant (max 512 characters).', max_length=512, null=True)),
                ('model', models.CharField(help_text="The ID of the model to use (e.g., 'gpt-4').", max_length=100)),
                ('instructions', models.TextField(blank=True, help_text='System instructions for the assistant (max 256,000 characters).', max_length=256000, null=True)),
                ('tools', models.JSONField(default=apps.assistant.models.assistant.default_tools, help_text='A list of tools enabled on the assistant (max 128).', validators=[apps.assistant.validators.validate_tools])),
                ('tool_resources', models.JSONField(blank=True, help_text="JSON object containing resources used by the assistant's tools.", null=True, validators=[apps.assistant.validators.validate_tool_resources])),
                ('temperature', models.FloatField(blank=True, default=1, help_text='Sampling temperature for responses, between 0 (deterministic) and 2 (highly random).', null=True, validators=[apps.assistant.validators.validate_temperature])),
                ('top_p', models.FloatField(blank=True, default=1, help_text='Nucleus sampling probability mass for responses, between 0 and 1.', null=True, validators=[apps.assistant.validators.validate_top_p])),
                ('response_format', models.JSONField(default=apps.assistant.models.assistant.default_response_format, help_text='Specifies the format that the model must output.', validators=[apps.assistant.validators.validate_response_format])),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata for the assistant.', validators=[apps.assistant.validators.validate_metadata])),
                ('owner', models.ForeignKey(help_text='The owner of this assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assistant',
                'verbose_name_plural': 'Assistants',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.CharField(help_text='The unique identifier of the OpenAI API object.', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(help_text='The object type.', max_length=50)),
                ('created_at', models.IntegerField(help_text='Unix timestamp (in seconds) for when the object was created.')),
                ('thread_id', models.CharField(help_text='The thread ID that this message belongs to.', max_length=100)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('completed', 'Completed')], help_text='The status of the message, which can be either in_progress, incomplete, or completed.', max_length=20, validators=[apps.assistant.validators.validate_status])),
                ('incomplete_details', models.JSONField(blank=True, help_text='Details about why the message is incomplete.', null=True)),
                ('incomplete_at', models.IntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the message was marked as incomplete.', null=True)),
                ('complete_at', models.IntegerField(blank=True, help_text='The Unix timestamp (in seconds) for when the message was marked as complete.', null=True)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], help_text='The entity that produced the message. One of user or assistant.', max_length=20, validators=[apps.assistant.validators.validate_role])),
                ('content', models.JSONField(default=apps.assistant.models.message.default_content, help_text='The content of the message in array of text and/or images.', validators=[apps.assistant.validators.validate_content])),
                ('assistant_id', models.CharField(blank=True, help_text='If applicable, the ID of the assistant that authored this message.', max_length=100, null=True)),
                ('run_id', models.CharField(blank=True, help_text='The ID of the run associated with the creation of this message. Value is null when messages are created manually using the create message or create thread endpoints.', max_length=100, null=True)),
                ('attachments', models.JSONField(blank=True, default=apps.assistant.models.message.default_attachments, help_text='A list of files attached to the message, and the tools they were added to.', null=True, validators=[apps.assistant.validators.validate_attachments])),
                ('metadata', models.JSONField(default=dict, help_text='Set of 16 key-value pairs that can be attached to an object.', validators=[apps.assistant.validators.validate_metadata])),
                ('owner', models.ForeignKey(help_text='The owner of this assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.CharField(help_text='The unique identifier of the OpenAI API object.', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(help_text='The object type.', max_length=50)),
                ('created_at', models.IntegerField(help_text='Unix timestamp (in seconds) for when the object was created.')),
                ('tool_resources', models.JSONField(blank=True, help_text="Resources available to the assistant's tools in this thread.", null=True, validators=[apps.assistant.validators.validate_tool_resources])),
                ('metadata', models.JSONField(default=apps.assistant.models.thread.default_metadata, help_text='A set of up to 16 key-value pairs for additional information.', validators=[apps.assistant.validators.validate_metadata])),
                ('owner', models.ForeignKey(help_text='The owner of this assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Thread',
                'verbose_name_plural': 'Threads',
            },
        ),
        migrations.CreateModel(
            name='VectorStore',
            fields=[
                ('id', models.CharField(help_text='The unique identifier of the OpenAI API object.', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(help_text='The object type.', max_length=50)),
                ('created_at', models.IntegerField(help_text='Unix timestamp (in seconds) for when the object was created.')),
                ('name', models.CharField(help_text='The name of the vector store.', max_length=255)),
                ('usage_bytes', models.IntegerField(help_text='The total number of bytes used by the files in the vector store.')),
                ('file_counts', models.JSONField(help_text='Counts of files in various statuses within the vector store.', validators=[apps.assistant.validators.validate_file_counts])),
                ('status', models.CharField(choices=[('expired', 'Expired'), ('in_progress', 'In Progress'), ('completed', 'Completed')], help_text='The status of the vector store, which can be either expired, in_progress, or completed.', max_length=20, validators=[apps.assistant.validators.validate_vector_store_status])),
                ('expires_after', models.JSONField(help_text='The expiration policy for the vector store.', validators=[apps.assistant.validators.validate_expires_after])),
                ('metadata', models.JSONField(default=apps.assistant.models.vectorstore.default_metadata, help_text='Set of 16 key-value pairs that can be attached to an object.', validators=[apps.assistant.validators.validate_metadata])),
                ('owner', models.ForeignKey(help_text='The owner of this assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vector Store',
                'verbose_name_plural': 'Vector Stores',
            },
        ),
        migrations.CreateModel(
            name='VectorStoreFile',
            fields=[
                ('id', models.CharField(help_text='The unique identifier of the OpenAI API object.', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(help_text='The object type.', max_length=50)),
                ('created_at', models.IntegerField(help_text='Unix timestamp (in seconds) for when the object was created.')),
                ('usage_bytes', models.IntegerField(help_text='The total vector store usage in bytes. Note that this may be different from the original file size.')),
                ('vector_store_id', models.CharField(help_text='The ID of the vector store that the File is attached to.', max_length=100)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], help_text='The status of the vector store file, which can be either in_progress, completed, cancelled, or failed. A status of completed indicates that the vector store file is ready for use.', max_length=20, validators=[apps.assistant.validators.validate_vector_store_file_status])),
                ('last_error', models.JSONField(blank=True, help_text='The last error associated with this vector store file. Will be null if there are no errors.', null=True, validators=[apps.assistant.validators.validate_last_error])),
                ('chunking_strategy', models.JSONField(help_text='The strategy used to chunk the file.', validators=[apps.assistant.validators.validate_chunking_strategy])),
                ('metadata', models.JSONField(default=apps.assistant.models.vectorstorefile.default_metadata, help_text='Set of 16 key-value pairs that can be attached to an object.', validators=[apps.assistant.validators.validate_metadata])),
                ('owner', models.ForeignKey(help_text='The owner of this assistant.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_owned', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vector Store File',
                'verbose_name_plural': 'Vector Store Files',
            },
        ),
    ]
